MEMORY {

# HEADER definition

    HEADER:     start = $0000,  size = $0010,   type = ro,  file = %O,  fill = yes;

# ZEROPAGE + RAM definitions

    ZP:         start = $0000,  size = $0100,   type = rw;
    RAM:        start = $0300,  size = $0300,   type = rw;

# PRG 16K definitions

    PRG00:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG01:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG02:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG03:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG04:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG05:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG06:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG07:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG08:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG09:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG0A:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG0B:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG0C:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG0D:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG0E:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG0F:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;

    PRG10:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG11:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG12:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG13:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG14:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG15:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG16:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG17:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG18:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG19:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG1A:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG1B:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG1C:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG1D:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    PRG1E:      start = $8000,  size = $4000,   type = ro,  file = %O,  fill = yes;
    
    # FIXED BANK
    PRG1F:      start = $C000,  size = $3ffa,   type = ro,  file = %O,  fill = yes;
    
    # VECTORS
    VECTORS:    start = $FFFA,  size = $0006,   type = ro,  file = %O,  fill = yes;

}

SEGMENTS {

    HEADER:     load = HEADER,      type = ro;
    ZEROPAGE:   load = ZP,          type = zp;

    PRG_BANK0:  load = PRG00,       type = ro,  optional = yes;
    PRG_BANK1:  load = PRG01,       type = ro,  optional = yes;
    PRG_BANK2:  load = PRG02,       type = ro,  optional = yes;
    PRG_BANK3:  load = PRG03,       type = ro,  optional = yes;
    PRG_BANK4:  load = PRG04,       type = ro,  optional = yes;
    PRG_BANK5:  load = PRG05,       type = ro,  optional = yes;
    PRG_BANK6:  load = PRG06,       type = ro,  optional = yes;
    PRG_BANK7:  load = PRG07,       type = ro,  optional = yes;
    PRG_BANK8:  load = PRG08,       type = ro,  optional = yes;
    PRG_BANK9:  load = PRG09,       type = ro,  optional = yes;
    PRG_BANK10: load = PRG0A,       type = ro,  optional = yes;
    PRG_BANK11: load = PRG0B,       type = ro,  optional = yes;
    PRG_BANK12: load = PRG0C,       type = ro,  optional = yes;
    PRG_BANK13: load = PRG0D,       type = ro,  optional = yes;
    PRG_BANK14: load = PRG0E,       type = ro,  optional = yes;

    PRG_BANK15: load = PRG0F,       type = ro,  optional = yes;
    PRG_BANK16: load = PRG10,       type = ro,  optional = yes;
    PRG_BANK17: load = PRG11,       type = ro,  optional = yes;
    PRG_BANK18: load = PRG12,       type = ro,  optional = yes;
    PRG_BANK19: load = PRG13,       type = ro,  optional = yes;
    PRG_BANK20: load = PRG14,       type = ro,  optional = yes;
    PRG_BANK21: load = PRG15,       type = ro,  optional = yes;
    PRG_BANK22: load = PRG16,       type = ro,  optional = yes;
    PRG_BANK23: load = PRG17,       type = ro,  optional = yes;
    PRG_BANK24: load = PRG18,       type = ro,  optional = yes;
    PRG_BANK25: load = PRG19,       type = ro,  optional = yes;
    PRG_BANK26: load = PRG1A,       type = ro,  optional = yes;
    PRG_BANK27: load = PRG1B,       type = ro,  optional = yes;
    PRG_BANK28: load = PRG1C,       type = ro,  optional = yes;
    PRG_BANK29: load = PRG1D,       type = ro,  optional = yes;
    PRG_BANK30: load = PRG1E,       type = ro,  optional = yes;
    CODE:       load = PRG1F,       type = ro,  optional = yes;

    VECTORS:    load = VECTORS,     type = ro;

    RAM:        load = RAM,         type = bss, optional = yes;
}

SYMBOLS {
    NES_MAPPER      : type = export,    value = 3870;
    # 0x0F00 = 3840 : NROM Rainbow mapper on FCEUX
    # 0x0F1E = 3870 : UNROM-512 Rainbow mapper on FCEUX
    NES_PRG_BANKS   : type = export,    value = 32; # number of 16K PRG banks | 4*16k=64k
    NES_CHR_BANKS   : type = export,    value = 0;  # number of 8K CHR banks
    NES_MIRRORING   : type = export,    value = 0;  # 0 horizontal, 1 vertical, 8 one-screen, 9 four screen
}
